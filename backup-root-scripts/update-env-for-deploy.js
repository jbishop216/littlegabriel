/**
 * Update Environment Variables for Deployment
 * 
 * This script is specifically designed for Replit deployments to ensure that
 * the environment variables from secrets are properly exported into the environment.
 * It creates a .env.production file with the necessary variables from the Replit secrets.
 */

const fs = require('fs');
const path = require('path');

// Get the Replit secrets from environment
console.log('Updating environment variables for deployment...');

// List of critical variables to export
const criticalVars = [
  'OPENAI_ASSISTANT_ID',
  'OPENAI_API_KEY',
  'BIBLE_API_KEY',
  'DATABASE_URL',
  'NEXTAUTH_SECRET',
  'NEXTAUTH_URL',
  'SESSION_SECRET',
  'GOOGLE_OAUTH_CLIENT_ID',
  'GOOGLE_OAUTH_CLIENT_SECRET'
];

// Create a .env.production file with the environment variables
const envProductionPath = path.join(__dirname, '.env.production');
let envContent = `# Generated by update-env-for-deploy.js\n# ${new Date().toISOString()}\n\n`;

// Fallback values for key environment variables if not set
const fallbacks = {
  OPENAI_ASSISTANT_ID: 'asst_BpFiJmyhoHFYUj5ooLEoHEX2', // Fallback Gabriel assistant ID
  NEXTAUTH_URL: 'https://littlegabriel.replit.app', // Update to your actual URL
  NEXTAUTH_SECRET: process.env.SESSION_SECRET || '24d4ed1be8b8b46ba5e8eb4bd5dc67d0', // Use SESSION_SECRET if available
  SESSION_SECRET: process.env.SESSION_SECRET || '24d4ed1be8b8b46ba5e8eb4bd5dc67d0',
};

// Ensure we have NextAuth variables
if (!process.env.NEXTAUTH_SECRET && process.env.SESSION_SECRET) {
  process.env.NEXTAUTH_SECRET = process.env.SESSION_SECRET;
  console.log(`⚠️ Using SESSION_SECRET as fallback for NEXTAUTH_SECRET`);
}

if (!process.env.NEXTAUTH_URL) {
  const replSlug = process.env.REPL_SLUG || 'littlegabriel';
  process.env.NEXTAUTH_URL = `https://${replSlug}.replit.app`;
  console.log(`⚠️ Using generated URL as fallback for NEXTAUTH_URL: ${process.env.NEXTAUTH_URL}`);
}

// Add each critical variable
criticalVars.forEach(varName => {
  let value = process.env[varName];
  
  if (!value && fallbacks[varName]) {
    value = fallbacks[varName];
    console.log(`⚠️ Using fallback value for ${varName}`);
  }
  
  if (value) {
    envContent += `${varName}=${value}\n`;
    // Don't show full API keys in logs for security
    const maskedValue = varName.includes('KEY') || varName.includes('SECRET') 
      ? `${value.substring(0, 4)}...${value.substring(value.length - 4)}`
      : value;
    console.log(`✅ Added ${varName}=${maskedValue} to .env.production`);
  } else {
    console.log(`❌ Missing ${varName} in environment`);
  }
});

// Add additional deployment-specific variables
envContent += `\n# Deployment specific settings\n`;
envContent += `NEXT_PUBLIC_DEPLOYMENT_MODE=production\n`;
envContent += `NEXT_DISABLE_PARALLEL_ROUTE_PRERENDERING=1\n`;
envContent += `NODE_ENV=production\n`;

// Write the file
fs.writeFileSync(envProductionPath, envContent);
console.log(`✅ Wrote ${envProductionPath}`);

// Copy .env.production to .env.local for local development
fs.copyFileSync(envProductionPath, path.join(__dirname, '.env.local'));
console.log(`✅ Copied to .env.local for development`);

// Also create a next.config.js that includes environment variables
const nextConfigPath = path.join(__dirname, 'next.config.js');
const nextConfigContent = `/** @type {import('next').NextConfig} */
module.exports = {
  env: {
    OPENAI_ASSISTANT_ID: '${process.env.OPENAI_ASSISTANT_ID || fallbacks.OPENAI_ASSISTANT_ID}',
    NEXT_PUBLIC_DEPLOYMENT_MODE: 'production',
  },
  // Ensure these paths get included in the build
  transpilePackages: ['next-auth'],
};
`;

fs.writeFileSync(nextConfigPath, nextConfigContent);
console.log(`✅ Updated next.config.js with environment variables`);

// Update package.json to run this script before build
const packageJsonPath = path.join(__dirname, 'package.json');
const packageJson = require(packageJsonPath);

// Add a prebuild script if it doesn't exist
if (!packageJson.scripts.prebuild) {
  packageJson.scripts.prebuild = 'node update-env-for-deploy.js';
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  console.log('✅ Added prebuild script to package.json');
}

console.log('Environment update complete!');