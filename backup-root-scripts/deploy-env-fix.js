/**
 * Fix for deployment environment variables
 * 
 * This script ensures that all necessary environment variables are properly set 
 * in the production build environment for deployment.
 */

const fs = require('fs');
const path = require('path');

console.log('ðŸ”§ Fixing Deployment Environment');
console.log('===============================');

// Create a production env file with essential variables
const envPath = path.join(__dirname, '.env.production');

// Read existing env if available
let existingEnv = '';
try {
  if (fs.existsSync(envPath)) {
    existingEnv = fs.readFileSync(envPath, 'utf8');
    console.log('Found existing .env.production file');
  }
} catch (error) {
  console.log('No existing .env.production file found');
}

// Extract values from existing environment or use defaults
const getEnvValue = (name, defaultValue = '') => {
  const regex = new RegExp(`^${name}=(.*)$`, 'm');
  const match = existingEnv.match(regex);
  return match ? match[1] : process.env[name] || defaultValue;
};

// Build the new environment content
const envContent = `# Production environment variables
# Generated by deploy-env-fix.js on ${new Date().toISOString()}

# Essential variables for OpenAI integration
OPENAI_API_KEY=${getEnvValue('OPENAI_API_KEY')}
OPENAI_ASSISTANT_ID=asst_BpFiJmyhoHFYUj5ooLEoHEX2
ASSISTANT_ID=asst_BpFiJmyhoHFYUj5ooLEoHEX2

# Bible API configuration
BIBLE_API_KEY=${getEnvValue('BIBLE_API_KEY')}

# Authentication configuration
NEXTAUTH_SECRET=${getEnvValue('NEXTAUTH_SECRET', 'YOUR_NEXTAUTH_SECRET')}
NEXTAUTH_URL=${getEnvValue('NEXTAUTH_URL', 'https://little-gabriel-jbishop216.replit.app')}

# Database connection
DATABASE_URL=${getEnvValue('DATABASE_URL')}

# Google OAuth (if using)
GOOGLE_OAUTH_CLIENT_ID=${getEnvValue('GOOGLE_OAUTH_CLIENT_ID')}
GOOGLE_OAUTH_CLIENT_SECRET=${getEnvValue('GOOGLE_OAUTH_CLIENT_SECRET')}

# Build configuration
NODE_ENV=production
NEXT_TELEMETRY_DISABLED=1
NEXT_DISABLE_PARALLEL_ROUTE_PRERENDERING=1
`;

// Write the new env file
fs.writeFileSync(envPath, envContent);
console.log(`âœ… Created .env.production file with ${envContent.split('\n').length} variables`);

// Update the next config to ensure the assistant ID is available
const nextConfigPath = path.join(__dirname, 'next.config.js');
let nextConfig = '';

try {
  nextConfig = fs.readFileSync(nextConfigPath, 'utf8');
  console.log('Found existing next.config.js');
} catch (error) {
  console.log('No existing next.config.js found, creating a new one');
}

// Check if the next config has the OPENAI_ASSISTANT_ID in env section
if (!nextConfig.includes('OPENAI_ASSISTANT_ID')) {
  console.log('Adding OPENAI_ASSISTANT_ID to next.config.js');
  
  // If the file exists and has an env section, add to it
  if (nextConfig.includes('env:')) {
    nextConfig = nextConfig.replace(
      /env:\s*{/,
      `env: {\n    OPENAI_ASSISTANT_ID: 'asst_BpFiJmyhoHFYUj5ooLEoHEX2',`
    );
  } 
  // Otherwise create a new config with the env section
  else if (nextConfig) {
    nextConfig = nextConfig.replace(
      /module\.exports\s*=\s*(\{|nextConfig)/,
      `module.exports = {\n  env: {\n    OPENAI_ASSISTANT_ID: 'asst_BpFiJmyhoHFYUj5ooLEoHEX2',\n  },\n  `
    );
  } 
  // If no config exists, create a whole new one
  else {
    nextConfig = `/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: false,
  env: {
    OPENAI_ASSISTANT_ID: 'asst_BpFiJmyhoHFYUj5ooLEoHEX2',
  },
  experimental: {
    allowedDevOrigins: ['localhost:5000', '0.0.0.0:5000', '*.replit.dev'],
  },
  webpack: (config) => {
    config.resolve.fallback = {
      ...config.resolve.fallback,
      fs: false,
      net: false,
      tls: false,
    };
    return config;
  },
};

module.exports = nextConfig;
`;
  }
  
  fs.writeFileSync(nextConfigPath, nextConfig);
  console.log('âœ… Updated next.config.js with OPENAI_ASSISTANT_ID');
}

// Create a deployment startup script
const startupScriptPath = path.join(__dirname, 'startup.js');
const startupScript = `/**
 * Startup script for deployment environments
 * 
 * This script ensures all environment variables are properly set
 * before starting the Next.js application.
 */

const { execSync } = require('child_process');

// Make environment variables available
require('dotenv').config({ path: '.env.production' });

// Ensure critical variables are available
process.env.OPENAI_ASSISTANT_ID = process.env.OPENAI_ASSISTANT_ID || 'asst_BpFiJmyhoHFYUj5ooLEoHEX2';
process.env.NODE_ENV = 'production';

console.log('Starting application with environment variables:');
console.log('OPENAI_ASSISTANT_ID:', process.env.OPENAI_ASSISTANT_ID);
console.log('NODE_ENV:', process.env.NODE_ENV);

// Start the application
try {
  execSync('npm start', { stdio: 'inherit' });
} catch (error) {
  console.error('Error starting application:', error);
  process.exit(1);
}
`;

fs.writeFileSync(startupScriptPath, startupScript);
console.log('âœ… Created startup.js for deployment');

// Update package.json to use the startup script
const packageJsonPath = path.join(__dirname, 'package.json');
try {
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  // Add or update the start script
  if (!packageJson.scripts) packageJson.scripts = {};
  packageJson.scripts.prestart = 'node deploy-env-fix.js';
  
  // Add engines specification for Node.js version
  packageJson.engines = {
    node: ">=18.0.0"
  };
  
  // Write the updated package.json
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  console.log('âœ… Updated package.json');
} catch (error) {
  console.error('Error updating package.json:', error);
}

// Create a .env.deploy for Replit Deployment
const replitDeployEnvPath = path.join(__dirname, '.env.deploy');
const replitDeployEnv = `OPENAI_ASSISTANT_ID=asst_BpFiJmyhoHFYUj5ooLEoHEX2
NODE_ENV=production
`;

fs.writeFileSync(replitDeployEnvPath, replitDeployEnv);
console.log('âœ… Created .env.deploy for Replit Deployment');

console.log('\nâœ… Deployment environment fix completed!');
console.log('You can now deploy the application with confidence.');