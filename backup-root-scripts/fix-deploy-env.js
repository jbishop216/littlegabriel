/**
 * Fix Environment Variables for Deployment
 * 
 * This script ensures all necessary environment variables are properly set
 * when the application is deployed in production. It includes specialized handling
 * for OpenAI integration to ensure it works reliably across environments.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Load environment variables from all possible sources
require('dotenv').config({ path: '.env.production' });
require('dotenv').config({ path: '.env.local' });
require('dotenv').config();

// Create the .env.production file with necessary variables
function createEnvProduction() {
  console.log('Creating .env.production file...');
  
  // Start with critical variables
  const envContent = [
    '# Production environment variables',
    '# Generated by fix-deploy-env.js',
    '',
    `NODE_ENV=production`,
    `NEXT_PUBLIC_DEPLOYMENT_MODE=production`,
    '',
    '# OpenAI configuration',
    `OPENAI_API_KEY=${process.env.OPENAI_API_KEY || ''}`,
    `OPENAI_ASSISTANT_ID=${process.env.OPENAI_ASSISTANT_ID || 'asst_BpFiJmyhoHFYUj5ooLEoHEX2'}`,
    `ASSISTANT_ID=${process.env.OPENAI_ASSISTANT_ID || 'asst_BpFiJmyhoHFYUj5ooLEoHEX2'}`,
    '',
    '# Authentication configuration',
    `NEXTAUTH_URL=${process.env.NEXTAUTH_URL || 'http://localhost:5000'}`,
    `NEXTAUTH_SECRET=${process.env.NEXTAUTH_SECRET || generateRandomSecret()}`,
    '',
    '# Database configuration',
    `DATABASE_URL=${process.env.DATABASE_URL || ''}`,
  ].join('\n');
  
  fs.writeFileSync('.env.production', envContent);
  console.log('✅ Created .env.production file');
}

// Generate a random secret for NextAuth if one is not provided
function generateRandomSecret() {
  return require('crypto').randomBytes(32).toString('hex');
}

// Test OpenAI connectivity
async function testOpenAIConnection() {
  if (!process.env.OPENAI_API_KEY) {
    console.error('❌ Cannot test OpenAI API: API key not set');
    return false;
  }
  
  try {
    console.log('\n🔍 Testing OpenAI connection...');
    
    // First try the production client
    let productionClientPath = path.join('src', 'lib', 'openai-production-client.js');
    if (fs.existsSync(productionClientPath)) {
      try {
        const productionClient = require('./' + productionClientPath);
        const result = await productionClient.testOpenAIConnection();
        if (result) {
          console.log('✅ OpenAI connection successful using production client');
          return true;
        } else {
          console.error('❌ OpenAI connection failed using production client');
        }
      } catch (productionClientError) {
        console.error('❌ Error using production client:', productionClientError.message);
      }
    }
    
    // Fallback to standard OpenAI client
    console.log('Falling back to standard OpenAI client...');
    const { OpenAI } = await import('openai');
    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: 'Hello, this is a connection test.' }],
      max_tokens: 10
    });
    
    console.log(`✅ OpenAI API responded: "${response.choices[0].message.content}"`);
    return true;
  } catch (error) {
    console.error('❌ OpenAI test failed:', error.message);
    return false;
  }
}

// Main function
async function fixDeploymentEnvironment() {
  console.log('\n🔧 FIXING DEPLOYMENT ENVIRONMENT\n');
  
  // Create production environment file
  createEnvProduction();
  
  // Log masked environment variables for verification
  console.log('\n📋 Current Environment:');
  console.log(`- NODE_ENV: ${process.env.NODE_ENV}`);
  console.log(`- OPENAI_ASSISTANT_ID: ${process.env.OPENAI_ASSISTANT_ID || 'not set'}`);
  
  const apiKey = process.env.OPENAI_API_KEY || '';
  const maskedKey = apiKey ? `${apiKey.substring(0, 4)}...${apiKey.length}` : 'NOT SET';
  console.log(`- OPENAI_API_KEY: ${maskedKey}`);
  
  // Test OpenAI connection
  const openaiStatus = await testOpenAIConnection();
  
  console.log('\n📊 Environment Check Results:');
  console.log(`- OpenAI API: ${openaiStatus ? '✅ Working' : '❌ Not working'}`); 
  
  if (!openaiStatus) {
    console.error('\n⚠️ Warning: The OpenAI integration failed the test.');
    console.log('Please check that your OPENAI_API_KEY is valid and has the correct permissions.');
  } else {
    console.log('\n🎉 All checks passed! The environment is ready for deployment.');
  }
}

// Run the main function
fixDeploymentEnvironment().catch(error => {
  console.error('\n💥 Unexpected error during environment setup:', error);
});
