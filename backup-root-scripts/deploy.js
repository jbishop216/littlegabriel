/**
 * Special script for Replit deployment preparation
 * 
 * This script verifies and prepares all necessary files and environment
 * variables for successful deployment in the Replit environment.
 * 
 * It addresses the specific issues with:
 * 1. Environment variables and secrets
 * 2. The _document.js/_document.tsx structure needed for Next.js
 * 3. Various file system checks
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ DEPLOYMENT PREPARATION SCRIPT');
console.log('===============================');

// Function to ensure a directory exists
function ensureDir(dirPath) {
  if (!fs.existsSync(dirPath)) {
    console.log(`Creating directory: ${dirPath}`);
    fs.mkdirSync(dirPath, { recursive: true });
    return true;
  }
  return false;
}

// Function to create a file if it doesn't exist
function ensureFile(filePath, content) {
  if (!fs.existsSync(filePath)) {
    console.log(`Creating file: ${filePath}`);
    fs.writeFileSync(filePath, content);
    return true;
  }
  return false;
}

// Function to log environment variable status
function checkEnvVars() {
  console.log('\nüìä Checking environment variables:');
  
  const criticalVars = [
    'OPENAI_ASSISTANT_ID',
    'OPENAI_API_KEY',
    'BIBLE_API_KEY'
  ];
  
  const otherVars = [
    'NODE_ENV',
    'DATABASE_URL',
    'REPL_SLUG',
    'REPL_ID'
  ];
  
  // Check critical variables first
  let missingCritical = false;
  criticalVars.forEach(varName => {
    const exists = process.env[varName] !== undefined;
    console.log(`${varName}: ${exists ? '‚úÖ exists' : '‚ùå missing'}`);
    if (!exists) missingCritical = true;
  });
  
  // Check other variables
  otherVars.forEach(varName => {
    const exists = process.env[varName] !== undefined;
    console.log(`${varName}: ${exists ? '‚úÖ exists' : '‚ö†Ô∏è missing (non-critical)'}`);
  });
  
  // If any critical variables are missing, create/update .env.production
  if (missingCritical) {
    console.log('\n‚ö†Ô∏è Creating/updating .env.production with critical variables');
    
    // Get all secrets from Replit
    let secrets = {};
    try {
      // This is a Replit-specific way to access secrets
      const secretsJson = execSync('secret list --json').toString();
      secrets = JSON.parse(secretsJson);
      console.log(`Found ${Object.keys(secrets).length} secrets`);
    } catch (err) {
      console.log('Error reading secrets list:', err.message);
    }
    
    // Create/update .env.production
    let envContent = '# Generated by deploy.js\n# ' + new Date().toISOString() + '\n\n';
    
    // Add critical variables from secrets
    criticalVars.forEach(varName => {
      if (secrets[varName]) {
        envContent += `${varName}=${secrets[varName]}\n`;
        console.log(`Added ${varName} from secrets to .env.production`);
      } else if (process.env[varName]) {
        // Backup: use from environment if available
        envContent += `${varName}=${process.env[varName]}\n`;
        console.log(`Added ${varName} from environment to .env.production`);
      } else {
        console.log(`‚ùå Could not find ${varName} in secrets or environment`);
      }
    });
    
    // Add deployment-specific settings
    envContent += '\n# Deployment specific settings\n';
    envContent += 'NODE_ENV=production\n';
    envContent += 'NEXT_PUBLIC_DEPLOYMENT_MODE=production\n';
    envContent += 'NEXT_DISABLE_PARALLEL_ROUTE_PRERENDERING=1\n';
    
    fs.writeFileSync('.env.production', envContent);
    console.log('‚úÖ Updated .env.production file');
  }
}

// Step 1: Ensure all critical directories exist
console.log('\nüóÇÔ∏è Checking directory structure:');
ensureDir('pages');
ensureDir('src/pages');
ensureDir('src/app');

// Step 2: Ensure critical files exist
console.log('\nüìÑ Checking critical files:');

// _document.js template
const documentTemplate = `import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}`;

// Create document files if they don't exist
const pagesDocumentJs = ensureFile('pages/_document.js', documentTemplate);
const srcPagesDocumentJs = ensureFile('src/pages/_document.tsx', documentTemplate);

if (pagesDocumentJs || srcPagesDocumentJs) {
  console.log('‚úÖ Created missing document files');
} else {
  console.log('‚úÖ All document files already exist');
}

// Check for duplicate app/page files
if (fs.existsSync('src/app/page.js') && fs.existsSync('src/app/page.tsx')) {
  console.log('‚ö†Ô∏è Found duplicate page files, removing page.js');
  fs.unlinkSync('src/app/page.js');
}

// Step 3: Check environment variables
checkEnvVars();

// Step 4: Offer to run the build
console.log('\n‚úÖ Deployment preparation complete!');
console.log('You can now run: npm run build');

// Return success
process.exit(0);